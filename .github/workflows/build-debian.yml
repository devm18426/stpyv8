name: Build Debian

on: [push, pull_request]

jobs:
  build-v8:
    # If v8 is in Workflow cache, don't build
    # Clone is necessary in any event to calculate a hash for the cache key
    name: Build v8
    runs-on: self-hosted
    outputs:
      v8-hash: ${{ steps.build-v8.outputs.v8-hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone v8
        run: |
          python -m pip install wheel
          echo "::group::Clone v8"
          python setup.py checkout_v8
          echo "::endgroup::"

      - name: Restore v8 from cache
        id: restore-v8
        uses: actions/cache/restore@main
        with:
          path: |
            v8/out.gn/x64.release.sample/obj/v8_monolith.lib
            v8/include
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

      - name: Build v8
        id: build-v8
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        continue-on-error: false
        run: |
          echo "v8-hash=${{ hashFiles('v8/src/**') }}" >> "$GITHUB_OUTPUT"
          python -m pip install wheel
          echo "::group::v8"
          python setup.py v8
          echo "::endgroup::"

      - name: Save v8 to cache
        uses: actions/cache/save@main
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        with:
          # Save compiled binary and header files
          # This will save an additional clone of v8 for the linker
          path: |
            v8/out.gn/x64.release.sample/obj/v8_monolith.lib
            v8/include
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

  build:
    name: Build wheel on debian-11.5
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: STEP 1. Initialization
        run: |
          rm -rf stpyv8
          pip uninstall -y stpyv8

      - name: STEP 2. Checkout repository
        uses: actions/checkout@v3

      - name: STEP 3. Install dependencies
        run: |
          sudo apt install libboost-dev libboost-system-dev libboost-iostreams-dev libboost-python-dev
          pip install --upgrade pip setuptools wheel pytest

      - name: Restore v8 from cache
        id: restore-v8
        uses: actions/cache/restore@main
        with:
          path: |
            v8/out.gn/x64.release.sample/obj/v8_monolith.lib
            v8/include
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

      - name: STEP 4. Build wheel
        run: |
          python setup.py sdist bdist_wheel --skip-build-v8 -d stpyv8-debian-11-${{ matrix.python-version }}
          cp v8/out.gn/x64.release.sample/icudtl.dat stpyv8-debian-11-${{ matrix.python-version }}/icudtl.dat
        env:
          V8_DEPS_LINUX: 0
          LDFLAGS: -L/usr/lib -L/usr/lib/x86_64-linux-gnu

      - name: STEP 5. Install wheel
        run : |
          cp stpyv8-debian-11-${{ matrix.python-version }}/icudtl.dat /usr/share/stpyv8
          pip install --upgrade stpyv8-debian-11-${{ matrix.python-version }}/stpyv8*.whl

      - name: STEP 6. Test wheel
        run: |
          pytest -v

      - name: STEP 7. Create wheel zip
        uses: vimtor/action-zip@v1.1
        with:
          files: stpyv8-debian-11-${{ matrix.python-version }}/
          recursive: false
          dest: stpyv8-debian-11-python-${{ matrix.python-version }}.zip

      - name: STEP 8. Upload wheel zip
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: stpyv8-debian-11-python-${{ matrix.python-version }}.zip
